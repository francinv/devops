name: Merge Dev to Main

on:
  push:
    branches:
      - dev

permissions:
  contents: write
  pull-requests: write

jobs:
  create_or_update_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Fetch main branch and all tags
        run: |
          git config remote.origin.url "https://github.com/${{ github.repository }}"
          git fetch origin main:main --force
          git fetch origin --tags --force

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Changelog Generator
        run: npm install -g conventional-changelog-cli

      - name: Find Existing Pull Request
        id: find_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --base main --head dev --state open --json number -q '.[0].number' || echo "")
          if [ -n "$PR_NUMBER" ]; then
            echo "Found existing PR: #$PR_NUMBER"
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "No open PR found."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate PR Title and Body
        id: generate_content
        run: |
          set -e
          # Manually construct the version string for the title, which is more reliable.
          # 1. Get the latest tag from the main branch. Use --abbrev=0 for a clean tag.
          LATEST_TAG=$(git describe --tags --abbrev=0 origin/main 2>/dev/null || echo "v0.0.0")

          # 2. Count the number of commits between main and dev.
          COMMIT_COUNT=$(git rev-list --count origin/main..dev)

          # 3. Get the short hash of the latest commit on dev.
          SHORT_HASH=$(git rev-parse --short dev)

          # 4. Combine them into a git-describe-like string.
          # If there are no new commits, just use the latest tag.
          if [ "$COMMIT_COUNT" -gt 0 ]; then
            VERSION_INFO="${LATEST_TAG}-${COMMIT_COUNT}-g${SHORT_HASH}"
          else
            VERSION_INFO=$LATEST_TAG
          fi
          echo "title=release: ${VERSION_INFO}" >> $GITHUB_OUTPUT

          # Generate Body content using our custom configuration file.
          CHANGELOG=$(git log origin/main..dev --pretty=format:'%B%n- - -%n' | conventional-changelog -p angular --config ./.changelog-config.js)

          BODY_INTRO="This PR is automatically generated and contains the latest changes from the dev branch."
          FINAL_BODY=$(printf "%s\n\n%s" "$BODY_INTRO" "$CHANGELOG")

          # Save the body to the step's output
          {
            echo 'body<<EOF'
            echo "$FINAL_BODY"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Create or Update Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ steps.generate_content.outputs.title }}
          PR_BODY: ${{ steps.generate_content.outputs.body }}
        run: |
          if [ "${{ steps.find_pr.outputs.exists }}" == "true" ]; then
            PR_NUMBER=${{ steps.find_pr.outputs.number }}
            echo "Updating existing PR #${PR_NUMBER}"
            gh pr edit "$PR_NUMBER" \
              --title "$PR_TITLE" \
              --body "$PR_BODY"
          else
            echo "Creating new PR"
            gh pr create \
              --base main \
              --head dev \
              --title "$PR_TITLE" \
              --body "$PR_BODY"
          fi
